I"“%<h1 id="container-hardening--how-to-secure-docker-containers">Container Hardening : How to secure docker containers?</h1>

<p>Docker is often imagined as a magic box, something isolated, safe, and self-contained. But in reality, Docker is just a thin abstraction over Linux features. If you want to secure your containers, you need to first understand how they actually work.</p>

<h2 id="docker-is-just-a-process-on-the-host">Docker is Just a Process on the Host</h2>

<p><img src="/img/posts/Cnt1/image.png" alt="image.png" /></p>

<p>When you start a container, youâ€™re not launching a VM. Youâ€™re just running a regular Linux process one that shares the same kernel as your host system.</p>

<p><img src="/img/posts/Cnt1/766376a4-448c-4ec9-8a6b-3fe6cc018436.png" alt="image.png" /></p>

<p><img src="/img/posts/Cnt1/a3b29020-bab5-4d3d-8e7e-338cf21231eb.png" alt="image.png" /></p>

<p>Youâ€™ll see the container is a process running under Dockerâ€™s supervision. Itâ€™s isolated using namespaces and cgroups, but itâ€™s not truly separate from the host.</p>

<p>Inside the container, PID 1 is just the shell process</p>

<p>But on the host, this same container appears as a regular Linux process 127800.</p>

<p>Youâ€™ll also see a couple of additional Docker-related processes around it; thatâ€™s just Docker doing its orchestration behind the scenes. What matters is: your container is simply a process running under the hood.</p>

<p><strong>-pid=host: Containers Can See the Host</strong>
By default, Docker containers have their own PID namespace. But if you run:</p>

<p><img src="/img/posts/Cnt1/image%201.png" alt="image.png" /></p>

<p>Now your container shares the hostâ€™s PID namespace. That means:</p>

<ul>
  <li>It can see every process on the host</li>
  <li>It can send signals to them</li>
  <li>And depending on permissions, it may even read memory or interfere with other containers</li>
</ul>

<p>This completely breaks process isolation.</p>

<h2 id="privileged-vs-unprivileged-containers">Privileged vs Unprivileged Containers</h2>

<p><strong>Unprivileged (Default)</strong>
Containers run with limited capabilities. They canâ€™t access most kernel modules, hardware devices, or perform sensitive operations like mounting arbitrary filesystems.</p>

<p><img src="/img/posts/Cnt1/image%202.png" alt="image.png" /></p>

<p><strong>Privileged</strong></p>

<p><img src="/img/posts/Cnt1/image%203.png" alt="image.png" /></p>

<p>Now your container has full access to host devices and all capabilities. It can:</p>

<ul>
  <li>Mount file systems</li>
  <li>Access hardware devices</li>
  <li>Modify kernel parameters</li>
</ul>

<p>In short: itâ€™s basically root on the host. This is extremely dangerous in production.</p>

<h2 id="linux-capabilities-fine-grained-privileges">Linux Capabilities: Fine-Grained Privileges</h2>

<p>Linux splits root privileges into smaller units called capabilities.</p>

<p>By default, Docker gives containers a set of capabilities like:</p>

<ul>
  <li><strong>CAP_CHOWN</strong></li>
  <li><strong>CAP_NET_BIND_SERVICE</strong></li>
  <li><strong>CAP_KILL</strong></li>
</ul>

<p>You can inspect them with: capsh â€“print</p>

<p><img src="/img/posts/Cnt1/image%204.png" alt="image.png" /></p>

<p>Imagine youâ€™re running a containerized application that listens on port 80, like a basic web server.
To do this, your container needs only one capability: NET_BIND_SERVICE, which allows binding to ports below 1024 (privileged port).</p>

<p>By default, Docker grants many more capabilities than needed. To lock it down:
This command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--cap-drop</span><span class="o">=</span>ALL <span class="nt">--cap-add</span><span class="o">=</span>NET_BIND_SERVICE nginx
</code></pre></div></div>

<ul>
  <li>Drops all Linux capabilities (â€“cap-drop=ALL)</li>
  <li>Adds back only whatâ€™s needed to bind to port 80 (â€“cap-add=NET_BIND_SERVICE)</li>
  <li>Runs the official nginx image, which by default listens on port 80</li>
</ul>

<p>Thatâ€™s it.. no need for full root powers, no file system control, no unnecessary privileges.</p>

<p><strong><em>Why This Is Important ?</em></strong>
If that web server is ever compromised, the attacker wonâ€™t be able to:</p>

<ul>
  <li>Change ownership of files</li>
  <li>Mount or unmount file systems</li>
  <li>Load kernel modules</li>
  <li>Kill arbitrary processes</li>
</ul>

<p>Youâ€™ve given it only what it needs, nothing more.</p>

<h2 id="seccomp-restricting-syscalls-to-whats-necessary">Seccomp: Restricting Syscalls to Whatâ€™s Necessary</h2>

<p>Even with capabilities removed, a process inside a container can still use a wide range of Linux system calls. Some of these syscalls like ptrace, mount, clone, or reboot can be dangerous if abused.</p>

<p>Thatâ€™s where seccomp comes in.</p>

<p>Seccomp (short for Secure Computing Mode) allows you to define a filter that restricts which syscalls a container is allowed to use. If a blocked syscall is used, the process is killed or denied access.</p>

<p>â‡’ Default Protection
By default, Docker applies a built-in seccomp profile, which blocks around 44 risky syscalls (like keyctl, ptrace, mount, kexec_load, etc.).
So unless youâ€™ve disabled it, Docker is already applying some basic syscall filtering.
Letâ€™s return to our minimal NGINX example â€” now adding seccomp hardening:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="se">\</span>
<span class="nt">--cap-drop</span><span class="o">=</span>ALL <span class="se">\</span>
<span class="nt">--cap-add</span><span class="o">=</span>NET_BIND_SERVICE <span class="se">\</span>
<span class="nt">--security-opt</span> <span class="nv">seccomp</span><span class="o">=</span>default <span class="se">\</span>
nginx
This:
</code></pre></div></div>

<p>Drops all Linux capabilities</p>

<p>Adds back only the ability to bind to port 80</p>

<p>Applies Dockerâ€™s default seccomp profile, which blocks high-risk syscalls</p>

<p><strong>This means:</strong></p>

<p>Even if the app is vulnerable, it canâ€™t call dangerous syscalls to escape, It can serve HTTP traffic but not mess with the kernel or host</p>

<p>For tighter control, you can define your own seccomp JSON profile and load it with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--security-opt</span> <span class="nv">seccomp</span><span class="o">=</span>/path/to/profile.json myimage
</code></pre></div></div>

<p>But for most use cases, Dockerâ€™s default profile is a solid baseline.</p>

<h2 id="namespaces-the-sandbox-foundation">Namespaces: The Sandbox Foundation</h2>

<p>Namespaces isolate six areas of the Linux system:</p>

<ul>
  <li><strong>pid</strong>: Process IDs</li>
  <li><strong>mnt</strong>: Mount points (file systems)</li>
  <li><strong>net</strong>: Network stack</li>
  <li><strong>ipc</strong>: Interprocess communication</li>
  <li><strong>uts</strong>: Hostname &amp; domain</li>
  <li><strong>user</strong>: User IDs</li>
</ul>

<p>This is how Docker gives containers their own view of the world.
But if you share namespaces with the host (e.g. â€“pid=host, â€“net=host), you break the sandbox.</p>

<h2 id="apparmor-mandatory-access-control">AppArmor: Mandatory Access Control</h2>

<p>Beyond namespaces and capabilities, Linux offers Mandatory Access Control (MAC) through: AppArmor which enforce strict policies:</p>

<ul>
  <li>What files a process can access</li>
  <li>What system calls it can make</li>
  <li>What operations it can perform</li>
</ul>

<p>Docker supports this via:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--security-opt</span> <span class="nv">apparmor</span><span class="o">=</span>docker-default alpine
</code></pre></div></div>

<h2 id="docker-bench-for-security">Docker Bench for Security</h2>

<p>If you want to go even further in securing your Docker environment, consider running the <a href="https://github.com/docker/docker-bench-security">Docker Bench for Security</a> script.</p>

<p>This tool checks your Docker configuration against the <strong>CIS Docker Benchmark</strong>, covering areas like:</p>

<p><strong>Host Configuration</strong></p>
<ul>
  <li>OS and kernel hardening</li>
  <li>Audit configurations for Docker binaries</li>
</ul>

<p><strong>Docker Daemon Configuration</strong></p>
<ul>
  <li>TLS usage</li>
  <li>User namespace remapping</li>
  <li>Inter-container communication (<code class="language-plaintext highlighter-rouge">--icc</code>)</li>
  <li>Live restore feature</li>
</ul>

<p><strong>Container Image &amp; Runtime Checks</strong></p>
<ul>
  <li>Usage of trusted and versioned images</li>
  <li>Avoiding <code class="language-plaintext highlighter-rouge">--privileged</code></li>
  <li>Dropping unnecessary capabilities</li>
  <li>Applying seccomp, AppArmor, or SELinux profiles</li>
</ul>

<p><strong>Security Operations</strong></p>
<ul>
  <li>Proper Docker socket permissions</li>
  <li>Audit logging</li>
  <li>Secure credential storage</li>
</ul>

<p><img src="/img/posts/Cnt1/image%205.png" alt="image.png" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>Docker containers are just processes. They can be isolated, but only if you configure them correctly. Misusing options like â€“privileged or â€“pid=host can turn that isolation into a security illusion.</p>
:ET